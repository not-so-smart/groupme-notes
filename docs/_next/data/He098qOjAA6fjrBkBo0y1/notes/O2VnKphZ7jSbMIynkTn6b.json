{"pageProps":{"note":{"id":"O2VnKphZ7jSbMIynkTn6b","title":"Event","vault":{"fsPath":"vault"},"type":"note","desc":"","links":[{"type":"wiki","from":{"fname":"group.event","id":"O2VnKphZ7jSbMIynkTn6b","vaultName":"vault"},"value":"group","alias":"group","position":{"start":{"line":1,"column":52,"offset":51},"end":{"line":1,"column":61,"offset":60},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"group"}},{"type":"wiki","from":{"fname":"group.event","id":"O2VnKphZ7jSbMIynkTn6b","vaultName":"vault"},"value":"message","alias":"Messages","position":{"start":{"line":1,"column":93,"offset":92},"end":{"line":1,"column":113,"offset":112},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"message"}},{"from":{"fname":"message.chat-message","vaultName":"vault"},"type":"backlink","position":{"start":{"line":26,"column":4,"offset":610},"end":{"line":26,"column":19,"offset":625},"indent":[]},"value":"group.event"}],"anchors":{"apijson-representation":{"type":"header","text":"API/JSON Representation","value":"apijson-representation","line":9,"column":0},"event-types":{"type":"header","text":"Event types","value":"event-types","line":18,"column":0},"bots":{"type":"header","text":"Bots","value":"bots","line":21,"column":0},"calendar":{"type":"header","text":"Calendar","value":"calendar","line":28,"column":0},"group":{"type":"header","text":"Group","value":"group","line":53,"column":0},"members":{"type":"header","text":"Members","value":"members","line":86,"column":0},"message":{"type":"header","text":"Message","value":"message","line":109,"column":0},"polls":{"type":"header","text":"Polls","value":"polls","line":116,"column":0}},"fname":"group.event","updated":1638932812446,"created":1638909094605,"parent":"UfTK0Ggs4Dxy7lLZfveNO","children":[],"data":{},"contentHash":"c8fcfee5b2a538bae7c1412d7927fd63","custom":{}},"body":"<h1 id=\"event\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#event\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Event</h1>\n<p>An <strong>event</strong> describes something that happens in a <a href=\"/groupme-notes/notes/UfTK0Ggs4Dxy7lLZfveNO\">Group</a>. Events are emitted in special <a href=\"/groupme-notes/notes/BR3F8919OQELtGFsOVIjB\">Messages</a> sent by the system.</p>\n<h2 id=\"apijson-representation\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#apijson-representation\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>API/JSON Representation</h2>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword module\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">APIEvent</span></span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    data<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>The <code>data</code> field is an object describing the details of the event. The structure of this object changes depending on the event type. You can find a list of known event types and their corresponding data object structures below.</p>\n<h2 id=\"event-types\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#event-types\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Event types</h2>\n<p>This list is by no means exhaustive. It contains only the events that were observed in my groups whenever this list was made (circa mid-2021).</p>\n<h3 id=\"bots\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#bots\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Bots</h3>\n<ul>\n<li><strong><code>bot.add</code></strong> - <em>emitted when a bot is added to the group</em>\n<ul>\n<li><code>user: User</code> - the user who added the bot</li>\n<li><code>bot: string</code> - the name of the added bot</li>\n</ul>\n</li>\n<li><strong><code>bot.del</code></strong> - <em>emitted when a bot is removed from the group</em>\n<ul>\n<li><code>user: User</code> - the user who removed the bot</li>\n<li><code>bot: string</code> - the name of the removed bot</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"calendar\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#calendar\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Calendar</h3>\n<ul>\n<li><strong><code>calendar.event.created</code></strong> - <em>emitted when a calendar event is created</em>\n<ul>\n<li><code>event: Object</code>\n<ul>\n<li><code>id: string</code> - the ID of the calendar event</li>\n<li><code>name: string</code> - the name of the calendar event</li>\n</ul>\n</li>\n<li><code>url: string</code> - a URL link to the calendar event</li>\n<li><code>user: UserWeird</code> - the user who created the event</li>\n</ul>\n</li>\n<li><strong><code>calendar.event.starting</code></strong> - <em>emitted when a calendar event is starting</em>\n<ul>\n<li><code>event_name: string</code> - the name of the event</li>\n<li><code>minutes: string</code> - the number of minutes until the event begins</li>\n</ul>\n</li>\n<li><strong><code>calendar.event.user.going</code></strong> - <em>emitted when a user RSVPs to an event as \"going\"</em>\n<ul>\n<li><code>event: Object</code>\n<ul>\n<li><code>id: string</code> - the ID of the calendar event</li>\n<li><code>name: string</code> - the name of the calendar event</li>\n</ul>\n</li>\n<li><code>user: UserWeird</code> - the user who RSVP'd</li>\n</ul>\n</li>\n<li><strong><code>calendar.event.user.not_going</code></strong> - <em>emitted when a user RSVPs to an event as \"not going\"</em>\n<ul>\n<li><code>event: Object</code>\n<ul>\n<li><code>id: string</code> - the ID of the calendar event</li>\n<li><code>name: string</code> - the name of the calendar event</li>\n</ul>\n</li>\n<li><code>user: UserWeird</code> - the user who RSVP'd</li>\n</ul>\n</li>\n<li><strong><code>calendar.event.user.undecided</code></strong> - <em>emitted when a user removes their RSVP from an event</em>\n<ul>\n<li><code>event: Object</code>\n<ul>\n<li><code>id: string</code> - the ID of the calendar event</li>\n<li><code>name: string</code> - the name of the calendar event</li>\n</ul>\n</li>\n<li><code>user: UserWeird</code> - the user who RSVP'd</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"group\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#group\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Group</h3>\n<ul>\n<li><strong><code>group.added_to_directory</code></strong> - <em>emitted when the group is added to a university directory</em>\n<ul>\n<li><code>user: User</code> - the user who added the group to the directory</li>\n<li><code>directory_name</code> - the name of the directory</li>\n</ul>\n</li>\n<li><strong><code>group.avatar_change</code></strong> - <em>emitted when the group avatar is updated</em>\n<ul>\n<li><code>user: User</code> - the user who changed the group avatar</li>\n<li><code>avatar_url: string</code> - the URL of the new avatar</li>\n</ul>\n</li>\n<li><strong><code>group.like_icon_set</code></strong> - <em>emitted when the group like icon is updated</em>\n<ul>\n<li><code>user: User</code> - the user who updated the like icon</li>\n<li><code>like_icon: Object</code>\n<ul>\n<li><code>pack_id: number</code></li>\n<li><code>pack_index: number</code></li>\n<li><code>type: string</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>group.name_change</code></strong> - <em>emitted when the group name is updated</em>\n<ul>\n<li><code>user: User</code> - the user who updated the group name</li>\n<li><code>name: string</code> - the new name of the group</li>\n</ul>\n</li>\n<li><strong><code>group.office_mode_disabled</code></strong> - <em>emitted when office mode is disabled in the group</em>\n<ul>\n<li><code>user: User</code> - the user who disabled office mode</li>\n</ul>\n</li>\n<li><strong><code>group.office_mode_enabled</code></strong> - <em>emitted when office mode is enabled in the group</em>\n<ul>\n<li><code>user: User</code> - the user who enabled office mode</li>\n</ul>\n</li>\n<li><strong><code>group.role_change_admin</code></strong> - <em>emitted when the owner promotes a member to the admin role</em>\n<ul>\n<li><code>user: User</code> - the user who initiated the change (the owner of the group)</li>\n<li><code>role: \"admin\"</code> - the role which was given (admin)</li>\n<li><code>member: User</code> - the member who received the role</li>\n</ul>\n</li>\n<li><strong><code>group.theme_change</code></strong> - <em>emitted when the group theme is updated</em>\n<ul>\n<li><code>user: User</code> - the user who changed the theme</li>\n<li><code>theme_name</code> - the name of the new theme</li>\n</ul>\n</li>\n<li><strong><code>group.topic_change</code></strong> - <em>emitted when the group topic is updated</em>\n<ul>\n<li><code>user: User</code> - the user who changed the topic</li>\n<li><code>topic: string</code> - the new topic for the group</li>\n</ul>\n</li>\n<li><strong><code>group.type_change</code></strong> - <em>emitted when the group type is updated</em>\n<ul>\n<li><code>user: User</code> - the user who initiated the change</li>\n<li><code>type: \"closed\" | \"private\"</code> - the new group type</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"members\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#members\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Members</h3>\n<ul>\n<li><strong><code>membership.announce.added</code></strong> - <em>emitted when one or more users are added to the group by an existing member</em>\n<ul>\n<li><code>added_users: User[]</code> - the user(s) who were added</li>\n<li><code>adder_user: User</code> - the member who added them</li>\n</ul>\n</li>\n<li><strong><code>membership.announce.joined</code></strong> - <em>emitted when a user joins the group from a share URL/token</em>\n<ul>\n<li><code>user: User</code> - the user who joined</li>\n</ul>\n</li>\n<li><strong><code>membership.announce.rejoined</code></strong> - <em>emitted when a former member who previously exited on their own, rejoins the group using the former group rejoin endpoint (or the \"archive\" in-app)</em>\n<ul>\n<li><code>user: User</code> - the user who rejoined</li>\n</ul>\n</li>\n<li><strong><code>membership.avatar_changed</code></strong> - <em>emitted when a member changes their avatar.</em> <strong>[DEPRECATED]</strong>\n<ul>\n<li><code>user: User</code> - the member who changed their avatar</li>\n<li><code>avatar_url: string</code> - the new avatar</li>\n<li><strong>NOTE:</strong> \"avatar\" here refers to a member's per-group avatar, not their \"primary\" user avatar which is used across all of GroupMe. This is similar to the distinction between a member's nickname in a group and their \"global\" user name associated with their account.</li>\n<li><strong>NOTE:</strong> This event is <strong>deprecated</strong>. It can still be found historically in old messages but is no longer used and will not be emitted in the future.</li>\n</ul>\n</li>\n<li><strong><code>membership.nickname_changed</code></strong> - <em>emitted when a member's nickname is updated</em>\n<ul>\n<li><code>user: User</code> - the member who changed their nickname</li>\n<li><code>name: string</code> - the new nickname for the member</li>\n</ul>\n</li>\n<li><strong><code>membership.notifications.autokicked</code></strong> - <em>emitted when an SMS user who had previously been added by an existing member using the SMS user's phone number, is autokicked (see membership states for more info)</em>\n<ul>\n<li><code>user: User</code> - the member who was autokicked</li>\n</ul>\n</li>\n<li><strong><code>membership.notifications.exited</code></strong> - <em>emitted when a member leaves the group on their own</em>\n<ul>\n<li><code>removed_user: User</code> - the member who left the group</li>\n</ul>\n</li>\n<li><strong><code>membership.notifications.removed</code></strong> - <em>emitted when a member is removed from the group by another member or admin</em>\n<ul>\n<li><code>remover_user: User</code> - the member who removed the other member</li>\n<li><code>removed_user: User</code> - the member who was removed</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"message\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#message\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Message</h3>\n<ul>\n<li><strong><code>message.deleted</code></strong> - <em>emitted when a message is deleted</em>\n<ul>\n<li><code>message_id: string</code> - the ID of the message</li>\n<li><code>deleted_at: number</code> - the timestamp when the message was deleted</li>\n<li><code>deletion_actor: \"sender\" | \"system\"</code> - the type of actor who deleted the message</li>\n<li><code>deleter_id: string</code> - the ID of the user who deleted the message</li>\n<li><strong>NOTE:</strong> <code>deleter_id</code> is always the message author ID, even if <code>deletion_actor</code> is set to <code>system</code>.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"polls\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#polls\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Polls</h3>\n<ul>\n<li><strong><code>poll.created</code></strong> - <em>emitted when a poll is created</em>\n<ul>\n<li><code>conversation: Object</code>\n<ul>\n<li><code>id: string</code> - the ID of the group this poll was created in</li>\n</ul>\n</li>\n<li><code>poll: Object</code>\n<ul>\n<li><code>id: string</code> - the ID of the poll that was created</li>\n<li><code>subject: string</code> - the question or prompt for the poll</li>\n</ul>\n</li>\n<li><code>user: UserWeird</code> - the user who created the poll</li>\n</ul>\n</li>\n<li><strong><code>poll.reminder</code></strong> - <em>emitted shortly before a poll expires</em>\n<ul>\n<li><code>conversation: Object</code>\n<ul>\n<li><code>id: string</code> - the ID of the group</li>\n</ul>\n</li>\n<li><code>poll: Object</code>\n<ul>\n<li><code>expiration: number</code> - the timestamp at which the poll will expire</li>\n<li><code>id: string</code> - the ID of the poll</li>\n<li><code>subject: string</code> - the question or prompt</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>poll.finished</code></strong> - <em>emitted when a poll is ended</em>\n<ul>\n<li><code>conversation: Object</code>\n<ul>\n<li><code>id: string</code> - the ID of the group</li>\n</ul>\n</li>\n<li><code>poll: Object</code>\n<ul>\n<li><code>id: string</code> - the ID of the poll</li>\n<li><code>subject: string</code> - the question or prompt</li>\n</ul>\n</li>\n<li><code>options: Object[]</code> - an array of <code>option</code> objects, each describing one option on the poll\n<ul>\n<li><code>id: string</code> - the ID of this option (IDs start at 1 and are sequential)</li>\n<li><code>title: string</code> - the text of this option</li>\n<li><code>votes?: number</code> - the number of votes this option received (never zero; only present if the option received at least one vote)</li>\n<li><code>voter_ids?: string[]</code> - the IDs of the users who voted for this option (never empty; only present if the option received at least vote AND the poll visibility is set to <code>public</code>)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"backlinks\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#backlinks\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Backlinks</h2>\n<ul>\n<li><a href=\"/groupme-notes/notes/TC2DDp9795LJS0wkf4GkZ\">Chat Message</a></li>\n</ul>","noteIndex":{"id":"BtqrGXASMeX2jK83wQjZK","title":"Root","vault":{"fsPath":"vault"},"type":"note","desc":"","links":[],"anchors":{"groupme-api-notes":{"type":"header","text":"GroupMe API Notes","value":"groupme-api-notes","line":7,"column":0}},"fname":"root","updated":1638496239066,"created":1638476729257,"parent":null,"children":["HiWRA7xMsjTJ0cFnQPkf1","1VSZbfRlK043L5qm9ct11","ccuZY1G3VSd9q0MSiTnft","UfTK0Ggs4Dxy7lLZfveNO","ORmwtXvQkZd5Qs4hm7qAE","BR3F8919OQELtGFsOVIjB","ErfIZMzFqiWTHR5pDIkZA"],"data":{},"contentHash":"4aaae18eacf93f60e182aa855212677a","custom":{"nav_order":0,"permalink":"/"},"body":"# GroupMe API Notes\n\nThis site is a public repository of my notes and research on the GroupMe API throughout the development of [node-groupme](https://github.com/groupme-js/node-groupme).\n\nHave a look around by clicking on whatever piques your interest in the sidebar, or check out the \"children\" list below to start exploring.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":4,"useFMTitle":true,"useNoteTitleForLink":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"Dendron","description":"Personal knowledge space","siteLastModified":true,"gh_edit_branch":"main","siteUrl":"https://not-so-smart.github.io","assetsPrefix":"/groupme-notes","usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false}},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"maxPreviewsCached":10,"maxNoteLength":204800,"seeds":{"dendron.templates":{}},"enableEditorDecorations":true},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true}}},"__N_SSG":true}