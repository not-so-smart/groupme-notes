{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title"},{"path":["body"],"id":"body","weight":1,"src":"body"}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"Root","n":1},"1":{"v":"# GroupMe API Notes\n\nThis site is a public repository of my notes and research on the GroupMe API throughout the development of [node-groupme](https://github.com/groupme-js/node-groupme).\n\nHave a look around by clicking on whatever piques your interest in the sidebar, or check out the \"children\" list below to start exploring.\n","n":0.147}}},{"i":2,"$":{"0":{"v":"User","n":1},"1":{"v":"A user is an entity representing a single person on GroupMe.\n","n":0.302}}},{"i":3,"$":{"0":{"v":"Message","n":1},"1":{"v":"A **message** is a discrete parcel of data sent by a [[user]] to a [[conversation]].\n\nA message may contain text and/or one or more [[Attachments|attachment]].\n\n## Message Types\nThere are two types of messages; Group Messages and Chat Messages.\n","n":0.167}}},{"i":4,"$":{"0":{"v":"Group Message","n":0.707}}},{"i":5,"$":{"0":{"v":"Chat Message","n":0.707},"1":{"v":"\nA **chat message** is a [[message]] sent in a [[chat]].\n\n## API/JSON Representation\n```ts\nexport interface APIChatMessage {\n    attachments: APIAttachment[]; // See [1]\n    avatar_url: string | null;\n    created_at: number;\n    favorited_by: [];\n    conversation_id: string;\n    id: string;\n    name: string;\n    sender_id: string;\n    sender_type: \"service\" | \"system\" | \"user\";\n    source_guid: string;\n    recipient_id: string;\n    text: string | null;\n    user_id: string;\n    event?: APIGroupEvent; // See [2]\n    deleted_at?: number;\n    deletion_actor?: \"sender\" | \"system\";\n}\n```\n1. [[attachment]]\n2. [[group.event]]\n\n## Representation in `node-groupme`\n","n":0.121}}},{"i":6,"$":{"0":{"v":"Member","n":1},"1":{"v":"A **member** is an entity representing a single relationship between a [[user]] and a [[group]].\n\n## API/JSON Representation\n```ts\nexport interface APIMember {\n    autokicked: boolean;\n    id: string;\n    image_url: string | null;\n    muted: boolean;\n    name: string;\n    nickname: string;\n    roles: MemberRole[];\n    user_id: string;\n}\n\nexport enum MemberRole {\n    Admin = \"admin\",\n    Owner = \"owner\",\n    User = \"user\",\n}\n```\n\n## Representation in `node-groupme`\nhttps://groupme.js.org/classes/Member","n":0.137}}},{"i":7,"$":{"0":{"v":"Group","n":1},"1":{"v":"Structurally, a **group** is an entity containing a single [[conversation]] and a collection of [[Members|member]].\n\nFunctionally, a **group** is a [[conversation]] between one or more [[Users|user]].\n\n## API/JSON Representation\n\n```ts\nexport interface APIGroup {\n    name: string;\n    id: string;\n    group_id: string;\n    description: string;\n    image_url: string | null;\n    creator_user_id: string;\n    members: APIMember[] | null; // See [1]\n    messages: {\n        count: number;\n        last_message_created_at: number | null;\n        last_message_id: string | null;\n        preview: {\n            attachments: APIAttachment[]; // See [2]\n            image_url: string | null;\n            nickname: string | null;\n            text: string | null;\n            deleted_at?: number;\n            deletion_actor?: \"sender\" | \"system\";\n        };\n    };\n    type: \"closed\" | \"private\";\n    requires_approval: boolean;\n    show_join_question: boolean;\n    join_question: null | {\n        type: \"join_reason/questions/text\";\n        text: string;\n    };\n    like_icon: null | {\n        pack_id: number;\n        pack_index: number;\n        type: string;\n    };\n    message_deletion_mode?: [\n        \"creator\",\n        \"sender\",\n    ];\n    message_deletion_period?: number;\n    muted_until?: number | null;\n    office_mode: boolean;\n    phone_number: string | null;\n    share_qr_code_url: string | null;\n    share_url: string | null;\n    theme_name: string | null;\n    max_members: number;\n    max_memberships?: number;\n    thread_id?: null;\n    created_at: number;\n    updated_at: number;\n}\n```\n1. [[member]]\n2. [[attachment]]\n\n## Representation in `node-groupme`\nhttps://groupme.js.org/classes/Group","n":0.079}}},{"i":8,"$":{"0":{"v":"Event","n":1},"1":{"v":"An **event** describes something that happens in a [[group]]. Events are emitted in special [[Messages|message]] sent by the system.\n\n## API/JSON Representation\n```ts\nexport interface APIEvent {\n    type: string;\n    data: Object;\n}\n```\nThe `data` field is an object describing the details of the event. The structure of this object changes depending on the event type. You can find a list of known event types and their corresponding data object structures below.\n\n## Event types\nThis list is by no means exhaustive. It contains only the events that were observed in my groups whenever this list was made (circa mid-2021).\n\n### Bots\n- **`bot.add`** - _emitted when a bot is added to the group_\n    - `user: User` - the user who added the bot\n    - `bot: string` - the name of the added bot\n- **`bot.del`** - _emitted when a bot is removed from the group_\n    - `user: User` - the user who removed the bot\n    - `bot: string` - the name of the removed bot\n### Calendar\n- **`calendar.event.created`** - _emitted when a calendar event is created_\n    - `event: Object`\n        - `id: string` - the ID of the calendar event\n        - `name: string` - the name of the calendar event\n    - `url: string` - a URL link to the calendar event\n    - `user: UserWeird` - the user who created the event\n- **`calendar.event.starting`** - _emitted when a calendar event is starting_\n    - `event_name: string` - the name of the event\n    - `minutes: string` - the number of minutes until the event begins\n- **`calendar.event.user.going`** - _emitted when a user RSVPs to an event as \"going\"_\n    - `event: Object`\n        - `id: string` - the ID of the calendar event\n        - `name: string` - the name of the calendar event\n    - `user: UserWeird` - the user who RSVP'd\n- **`calendar.event.user.not_going`** - _emitted when a user RSVPs to an event as \"not going\"_\n    - `event: Object`\n        - `id: string` - the ID of the calendar event\n        - `name: string` - the name of the calendar event\n    - `user: UserWeird` - the user who RSVP'd\n- **`calendar.event.user.undecided`** - _emitted when a user removes their RSVP from an event_\n    - `event: Object`\n        - `id: string` - the ID of the calendar event\n        - `name: string` - the name of the calendar event\n    - `user: UserWeird` - the user who RSVP'd\n### Group\n- **`group.added_to_directory`** - _emitted when the group is added to a university directory_\n    - `user: User` - the user who added the group to the directory\n    - `directory_name` - the name of the directory\n- **`group.avatar_change`** - _emitted when the group avatar is updated_\n    - `user: User` - the user who changed the group avatar\n    - `avatar_url: string` - the URL of the new avatar\n- **`group.like_icon_set`** - _emitted when the group like icon is updated_\n    - `user: User` - the user who updated the like icon\n    - `like_icon: Object`\n        - `pack_id: number`\n        - `pack_index: number`\n        - `type: string`\n- **`group.name_change`** - _emitted when the group name is updated_\n    - `user: User` - the user who updated the group name\n    - `name: string` - the new name of the group\n- **`group.office_mode_disabled`** - _emitted when office mode is disabled in the group_\n    - `user: User` - the user who disabled office mode\n- **`group.office_mode_enabled`** - _emitted when office mode is enabled in the group_\n    - `user: User` - the user who enabled office mode\n- **`group.role_change_admin`** - _emitted when the owner promotes a member to the admin role_\n    - `user: User` - the user who initiated the change (the owner of the group)\n    - `role: \"admin\"` - the role which was given (admin)\n    - `member: User` - the member who received the role\n- **`group.theme_change`** - _emitted when the group theme is updated_\n    - `user: User` - the user who changed the theme\n    - `theme_name` - the name of the new theme\n- **`group.topic_change`** - _emitted when the group topic is updated_\n    - `user: User` - the user who changed the topic\n    - `topic: string` - the new topic for the group\n- **`group.type_change`** - _emitted when the group type is updated_\n    - `user: User` - the user who initiated the change\n    - `type: \"closed\" | \"private\"` - the new group type\n### Members\n- **`membership.announce.added`** - _emitted when one or more users are added to the group by an existing member_\n    - `added_users: User[]` - the user(s) who were added\n    - `adder_user: User` - the member who added them\n- **`membership.announce.joined`** - _emitted when a user joins the group from a share URL/token_\n    - `user: User` - the user who joined\n- **`membership.announce.rejoined`** - _emitted when a former member who previously exited on their own, rejoins the group using the former group rejoin endpoint (or the \"archive\" in-app)_\n    - `user: User` - the user who rejoined\n- **`membership.avatar_changed`** - _emitted when a member changes their avatar._ **[DEPRECATED]**\n    - `user: User` - the member who changed their avatar\n    - `avatar_url: string` - the new avatar\n    - **NOTE:** \"avatar\" here refers to a member's per-group avatar, not their \"primary\" user avatar which is used across all of GroupMe. This is similar to the distinction between a member's nickname in a group and their \"global\" user name associated with their account.\n    - **NOTE:** This event is **deprecated**. It can still be found historically in old messages but is no longer used and will not be emitted in the future.\n- **`membership.nickname_changed`** - _emitted when a member's nickname is updated_\n    - `user: User` - the member who changed their nickname\n    - `name: string` - the new nickname for the member\n- **`membership.notifications.autokicked`** - _emitted when an SMS user who had previously been added by an existing member using the SMS user's phone number, is autokicked (see membership states for more info)_\n    - `user: User` - the member who was autokicked\n- **`membership.notifications.exited`** - _emitted when a member leaves the group on their own_\n    - `removed_user: User` - the member who left the group\n- **`membership.notifications.removed`** - _emitted when a member is removed from the group by another member or admin_\n    - `remover_user: User` - the member who removed the other member\n    - `removed_user: User` - the member who was removed\n### Message\n- **`message.deleted`** - _emitted when a message is deleted_\n    - `message_id: string` - the ID of the message\n    - `deleted_at: number` - the timestamp when the message was deleted\n    - `deletion_actor: \"sender\" | \"system\"` - the type of actor who deleted the message\n    - `deleter_id: string` - the ID of the user who deleted the message\n    - **NOTE:** `deleter_id` is always the message author ID, even if `deletion_actor` is set to `system`.\n### Polls\n- **`poll.created`** - _emitted when a poll is created_\n    - `conversation: Object`\n        - `id: string` - the ID of the group this poll was created in\n    - `poll: Object`\n        - `id: string` - the ID of the poll that was created\n        - `subject: string` - the question or prompt for the poll\n    - `user: UserWeird` - the user who created the poll\n- **`poll.reminder`** - _emitted shortly before a poll expires_\n    - `conversation: Object`\n        - `id: string` - the ID of the group\n    - `poll: Object`\n        - `expiration: number` - the timestamp at which the poll will expire\n        - `id: string` - the ID of the poll\n        - `subject: string` - the question or prompt\n- **`poll.finished`** - _emitted when a poll is ended_\n    - `conversation: Object`\n        - `id: string` - the ID of the group\n    - `poll: Object`\n        - `id: string` - the ID of the poll\n        - `subject: string` - the question or prompt\n    - `options: Object[]` - an array of `option` objects, each describing one option on the poll\n        - `id: string` - the ID of this option (IDs start at 1 and are sequential)\n        - `title: string` - the text of this option\n        - `votes?: number` - the number of votes this option received (never zero; only present if the option received at least one vote)\n        - `voter_ids?: string[]` - the IDs of the users who voted for this option (never empty; only present if the option received at least vote AND the poll visibility is set to `public`)\n","n":0.028}}},{"i":9,"$":{"0":{"v":"Conversation","n":1},"1":{"v":"Structurally, a conversation is an abstract structure describing a collection of [[Messages|message]].\n\nFunctionally, a conversation is an abstract entity describing a channel by which [[Users|user]] can send and receive [[Messages|message]].\n\n[[Groups|group]] and [[Chats|chat]] are the two types of conversations in GroupMe.\n","n":0.16}}},{"i":10,"$":{"0":{"v":"Chat","n":1},"1":{"v":"A **chat** is a unique [[conversation]] between two [[Users|user]].\n\nA chat represents a distinct relationship between exactly two users; any two users may have only one chat between them, and any chat may not include more than two users.\n\n## API/JSON Representation\n```ts\nexport interface APIChat {\n    last_message: APIChatMessage; // See [1]\n    message_deletion_mode: [\n        \"creator\",\n        \"sender\",\n    ];\n    message_deletion_period: number;\n    messages_count: number;\n    other_user: {\n        id: string;\n        name: string;\n        avatar_url: string;\n    };\n    created_at: number;\n    updated_at: number;\n}\n```\n1. [[message]]\n\n## Representation in `node-groupme`\nhttps://groupme.js.org/classes/Chat","n":0.116}}},{"i":11,"$":{"0":{"v":"Attachment","n":1},"1":{"v":"An attachment is an optional piece of data appended to a [[message]].\n\nZero or more attachments may be associated with a single message.\n","n":0.213}}}]}
